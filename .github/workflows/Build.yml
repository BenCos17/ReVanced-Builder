name: Build

on: 
  push:
    tags:
      - "*"
  workflow_dispatch:

jobs:
  patch:
    runs-on: windows-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v3

      - name: AngleSharp
        run: |
          New-Item -Path ReVanced_Builder -ItemType Directory -Force
          $Parameters = @{
              Uri             = "https://www.nuget.org/api/v2/package/AngleSharp"
              OutFile         = "anglesharp.nupkg"
              UseBasicParsing = $true
              Verbose         = $true
          }
          Invoke-Webrequest @Parameters
          Add-Type -Assembly System.IO.Compression.FileSystem
          $ZIP = [IO.Compression.ZipFile]::OpenRead("anglesharp.nupkg")
          $ZIP.Entries | Where-Object { $_.FullName -in @("lib/net8.0/AngleSharp.xml", "lib/net8.0/AngleSharp.dll") } | ForEach-Object {
              [IO.Compression.ZipFileExtensions]::ExtractToFile($_, $_.Name, $true)
          }
          $ZIP.Dispose()
          
      - name: YouTube
        run: . Scripts\YouTube.ps1

      - name: ReVanced CLI
        run: . Scripts\ReVanced_CLI.ps1

      - name: Downloading ReVanced Patches
        run: . Scripts\ReVanced_Patches.ps1

      - name: Vanced MicroG
        run: . Scripts\MicroG.ps1

      - name: Zulu JDK
        run: . Scripts\Zulu_JDK.ps1

      # Restore keystore from base64 secret
      - name: Restore Keystore
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        run: |
          $decoded = [System.Convert]::FromBase64String($env:KEYSTORE_BASE64)
          [IO.File]::WriteAllBytes("my-release-key.jks", $decoded)
          dir my-release-key.jks

      - name: Building
        run: |
          & "$env:ProgramFiles\Zulu\zulu*\bin\java.exe" `
          -jar "ReVanced_Builder\revanced-cli.jar" `
          patch "ReVanced_Builder\youtube.apk" `
          --patches "ReVanced_Builder\revanced-patches.rvp" `
          --purge `
          --out "ReVanced_Builder\revanced.apk"

      # Setup Android SDK build tools for apksigner
      - name: Setup Android SDK Build Tools
        uses: android-actions/setup-android@v2
        with:
          api-level: 33
          build-tools-version: 33.0.2

      # Add build-tools to PATH persistently for next steps
      - name: Add build-tools to PATH
        shell: pwsh
        run: |
          $buildToolsPath = "${{ env.ANDROID_SDK_ROOT }}\build-tools\33.0.2"
          Write-Host "Adding $buildToolsPath to PATH"
          echo "$buildToolsPath" >> $env:GITHUB_PATH

      # Optional: verify apksigner is available
      - name: Verify apksigner
        run: apksigner --version

      # Sign APK with apksigner (v2/v3 signature)
      - name: Sign APK with apksigner
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          apksigner sign --ks my-release-key.jks `
            --ks-key-alias $env:KEY_ALIAS `
            --ks-pass pass:$env:KEYSTORE_PASSWORD `
            --key-pass pass:$env:KEY_PASSWORD `
            --out ReVanced_Builder/revanced-signed.apk `
            ReVanced_Builder/revanced.apk

      - name: Replace unsigned APK with signed APK
        run: |
          Remove-Item ReVanced_Builder\revanced.apk
          Rename-Item ReVanced_Builder\revanced-signed.apk ReVanced_Builder\revanced.apk

      - name: Creating archive
        run: |
          $Parameters = @{
              Path             = "ReVanced_Builder\revanced.apk", "ReVanced_Builder\microg.apk", "ReVanced_Builder\microg-huawei.apk"
              DestinationPath  = "ReVanced.zip"
              CompressionLevel = "Fastest"
              Force            = $true
          }
          Compress-Archive @Parameters

      - name: ReleaseNotesTemplate
        id: read_release
        run: |
          (Get-Content -Path ReleaseNotesTemplate.md -Encoding utf8 -Raw).replace("YouTubeTag", "${{ env.LatestSupportedYT }}").replace("CLITag", "${{ env.CLIvtag }}").replace("PatchesTag", "${{ env.Patchesvtag }}").replace("MicroGTag", "${{ env.MicroGTag }}").replace("ZuluTag", "${{ env.ZuluTag }}") | Set-Content -Path ReleaseNotesTemplate.md -Encoding utf8 -Force
          Add-Content -Path $env:GITHUB_OUTPUT -Value "ReleaseBody=ReleaseNotesTemplate.md"
          $ReleaseName = Get-Date -f "yyyy.MM.dd"
          echo "RELEASE_NAME=$ReleaseName" >> $env:GITHUB_ENV

      - name: Uploading
        uses: softprops/action-gh-release@master
        with:
          name: ${{ env.RELEASE_NAME }}
          token: ${{ github.token }}
          files: ReVanced.zip
          body_path: ${{ steps.read_release.outputs.ReleaseBody }}
